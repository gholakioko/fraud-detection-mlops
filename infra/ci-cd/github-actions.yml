name: Fraud Detection MLOps Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: fraud-detection
  
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
        
    - name: Lint code
      run: |
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check src
        isort --check-only src
        
    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infra/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  model-validation:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Generate sample data
      run: |
        python -c "
        from src.utils.helpers import generate_sample_data
        df = generate_sample_data(1000, 0.1)
        df.to_csv('sample_data.csv', index=False)
        "
        
    - name: Train and validate model
      run: |
        python src/training/train_model.py \
          --data-path sample_data.csv \
          --model-type random_forest \
          --output-dir models/validated
          
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: validated-model
        path: models/validated/
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, model-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
    - name: Deploy to staging
      run: |
        # Update image tag in deployment
        sed -i "s|fraud-detection:latest|${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}|g" infra/k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f infra/k8s/namespace.yaml
        kubectl apply -f infra/k8s/deployment.yaml -n fraud-detection
        
        # Wait for rollout
        kubectl rollout status deployment/fraud-detection-api -n fraud-detection --timeout=300s
        
    - name: Run integration tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Get service endpoint
        SERVICE_URL=$(kubectl get svc fraud-detection-service -n fraud-detection -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "localhost")
        
        # Run basic health check
        curl -f http://${SERVICE_URL}/health || exit 1
        
        # Run prediction test
        curl -X POST http://${SERVICE_URL}/predict \
          -H "Content-Type: application/json" \
          -d '{"amount": 100.0, "merchant_category": "online", "hour": 14}' || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PROD_KUBE_CONFIG }}
        
    - name: Deploy to production
      run: |
        # Update image tag in deployment
        sed -i "s|fraud-detection:latest|${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:sha-${GITHUB_SHA::7}|g" infra/k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f infra/k8s/namespace.yaml
        kubectl apply -f infra/k8s/deployment.yaml -n fraud-detection
        
        # Wait for rollout
        kubectl rollout status deployment/fraud-detection-api -n fraud-detection --timeout=600s
        
    - name: Verify production deployment
      run: |
        # Basic health and functionality checks
        sleep 60
        SERVICE_URL=$(kubectl get svc fraud-detection-service -n fraud-detection -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://${SERVICE_URL}/health
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Fraud Detection API deployed to production successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
